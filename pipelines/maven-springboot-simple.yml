#########################################################################################################
# Pipeline simple para manejar proyectos maven/java. Los diferentes jobs estan descritos en archivos
# del directorio jobs/maven.
# Este pipeline se ejecuta solo en caso de push de cualquier rama, aunque buena parte de los
# jobs se ejecutan solo para las ramas master o develop.
#
# Vers  Por Fecha      Notas
# ----- --- ---------- ----------------------------------------------------------------------------------
# 1.0.0 FNG 26/07/2022 Version inicial
#
#########################################################################################################
variables:
  ##
  # Globales. Deben definirse en la cofiguracion de CI/CD del grupo, de modo que solo sean accesibles
  # para los usuarios con role 'manager'.
  ##
  #
  # CICD_USER: "antonio"
  # CICD_PASSWD: "unamuydificil"
  # CICD_TOKEN: "aaaaaaaaaaaaaaaaaaaaaa"
  # CICD_EMAIL: "antonio@putin.org"
  # CICD_HOST: "git2.comunytek.com"
  # CICD_REGISTRY_HOST: "https://registry2.comunytek.com"
  # SONAR_HOST_URL: "https://sonar2.comunytek.com"
  # SONAR_HOST_TOKEN: "bbbbbbbbbbbbbbbbbbbb"
  #
  ##
  # Basicas del pipeline
  ##
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  MAVEN_OPTS: "-Dmaven.repo.local=./.m2/repository"
  # Como acceder a nuestro gitlab desde un executor
  ORIGIN_URL: "https://oauth2:${CICD_TOKEN}@${CICD_HOST}/${CI_PROJECT_PATH}.git"
  ##
  # Variables del pipeline que solo debe modificar el manager del grupo.
  # Si se desea, y para mayor seguridad, pueden definirse como variables CI/CD de grupo.
  ##
  #
  # No ejecutar el pipeline en ramas auxiliares (aquellas distintas de 'master' y 'develop').
  # Si se define a "true", el resto de flags relacionados con ramas auxiliares no tienen efecto.
  # Como excepcion, la rama identificada como HOTFIX_BRANCH (si existe) siempre pasa.
  #
  IGNORE_AUX_BRANCHES: "false"
  #
  # Compilar ramas auxiliares
  #
  COMPILE_AUX_BRANCHES: "true"
  #
  # Pasar sonar en ramas auxiliares.
  # Al ser un proceso informativo, se permite o no que los tests fallen.
  #
  SONAR_AUX_BRANCHES: "true"
  #
  # Pasar tests unitarios en ramas auxiliares.
  # Al ser un proceso informativo, se permite o no que los tests fallen.
  #
  TEST_AUX_BRANCHES: "false"
  #
  # Permitir o no errores al pasar Sonar en rama 'develop'.
  #
  ALLOW_FAILURE_IN_SONAR_DEVELOP: "true"
  #
  # Permitir o no errores al pasar tests unitarios en rama 'develop'.
  #
  ALLOW_FAILURE_IN_TEST_DEVELOP: "true"
  #
  # Permitir versiones 'release' en rama 'develop'. Lo normal es que no se permita,
  # pero puede haber circunstancias muy especiales en que sea necesario.
  # NOTA: No permitimos versiones SNAPSHOT en 'master' en ningun caso.
  #
  ALLOW_RELEASE_IN_DEVELOP: "true"
  #
  # Registrar, generar imagen docker y tag de la rama 'develop'. Debe indicarse a "true"
  # si la rama 'develop' representa despliegues oficiales en preproducción, UAT, QA o staging.
  # Si se establece como "false", el pipeline termina con la generación del fat-jar y su
  # almacenamiento temporal como artefacto.
  #
  REGISTER_DEVELOP: "true"
  ################################## VARIABLES #####################################

workflow:
  rules:
    #
    # No ejecutar al crear tags (se supone que ya se han verificado, tanto si son manuales como
    # si se han generado en este pipeline).
    #
    - if: $CI_COMMIT_TAG                   
      when: never
    #
    # No ejecutar este pipeline en ramas auxiliares
    #
    - if: $IGNORE_AUX_BRANCHES == "true" && $CI_COMMIT_REF_NAME != "develop" && $CI_COMMIT_REF_NAME != "master" && $CI_COMMIT_REF_NAME != $HOTFIX_BRANCH
      when: never
    #
    # En este ejemplo solo ejecutamos en caso de 'push'. En algunas organizaciones se utilizan 'merge-requests' que
    # han de ser aprobados por un supervisor. Esta intervención manual va en contra de los principios de 'Integración
    # Continua'. Ver en la documentación el modo de forzar intervención manual en casos concretos.
    #
    - if: $CI_PIPELINE_SOURCE == 'push' 

# Esta es una imagen propia, con maven y git, y uso local. Requiere cambiar pull_policy en config.toml a 'if-not-present'.
# Al disponer de esta imagen, no es necesario incluir la instalacion de maven y git en los jobs que necesiten de
# estos entornos. Ver documentación para detalles.
image: ck-maven-executor:1.0.0 

cache:
  # Definimos la clave del cache como el nombre del branch en el que hacemos push, de este modo
  # separamos la informacion cacheada para cada rama, para no interferir en otros pipelines.
  key: "$CI_COMMIT_REF_NAME"

# Etapas posibles del pipeline
stages:
  - prepare
  - compile
  - sonar
  - test
  - build
  - register
  - docker
  - tag
  - deploy

# Includes, uno por job
include: 
  - project: 'comunytek/cicd-librerias'
    ref: master
    file: 
      #
      # prepare-job: preparar entorno
      #
      - 'jobs/maven/prepare-simple.yml'
      #
      # compile-job: comprueba que no hay errores de compilacion
      #
      - 'jobs/maven/compile-simple.yml'
      #
      # sonar-job: verifica calidad del codigo
      #
      - 'jobs/maven/sonar-simple.yml'
      #
      # test-job: ejecuta tests unitarios
      #
      - 'jobs/maven/test-simple.yml'
      #
      # build-job: genera el fat-jar
      #
      - 'jobs/maven/build-simple.yml'
      #
      # register-job: Sube el artefacto al registry
      #
      - 'jobs/maven/register-simple.yml'
      #
      # docker-job: crea una imagen docker y la guarda en el registry de gitlab
      #
      - 'jobs/maven/docker-simple.yml'
      #
      # tag-job: Genera tag (solo rama master) (manual)
      #
      - 'jobs/maven/tag-simple.yml'
      #
      # deploy-job: Despliega la nueva imagen docker (manual)
      #
      - 'jobs/maven/deploy-simple.yml'

########################### E O F ##################################      

