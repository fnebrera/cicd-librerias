#########################################################################################################
# Esta primera estapa del pipeline se ejecuta de manera incondicional, y se encarga de preparar la cache
# y las variables de entorno que se vayan a emplear en subsiguientes etapas. En el ejemplo actual,
# podría incluirse en el job "compile" y ahorrarnos una etapa, pero lo dejamos a efectos didácticos.
#
# Vers  Por Fecha      Notas
# ----- --- ---------- ----------------------------------------------------------------------------------
# 1.0.0 FNG 22/08/2022 Version inicial
# 1.0.2 FNG 05/10/2022 Se agrega libreria bash, y se generaliza el deploy
#
#########################################################################################################
prepare-job:
  stage: prepare

  cache:
    paths:
      - ./.m2/repository
      - ./.sonar/cache
      - ./target
      - ./cicd.vars
      - ${TF_ROOT}/.terraform.lock.hcl
      - ${TF_ROOT}/.terraform

  before_script:
    - . funciones-bash.sh

  script:
    - |
      echo_job_banner PREPARE
      #
      # Nos han dicho que limpiemos el cache?
      #
      if [[ $PREPARE_CLEAN_CACHE == "true" ]]; then
        t_echo "INFO Limpiando cache.."
        [[ -d "./.m2/repository" ]] && { t_echo "DEBUG Eliminando ./.m2/repository .."; rm -Rf ./.m2/repository; }
        [[ -d "./.sonar/cache" ]] && { t_echo "DEBUG Eliminando ./.sonar/cache .."; rm -Rf ./.sonar/cache; }
        [[ -d "./target" ]] && { t_echo "DEBUG Eliminando ./target .."; rm -Rf ./target; }
        [[ -d "${TF_ROOT}/.terraform" ]] && { t_echo "DEBUG Eliminando ${TF_ROOT}/.terraform .."; rm -Rf ${TF_ROOT}/.terraform; }
        [[ -f "${TF_ROOT}/.terraform.lock.hcl" ]] && { t_echo "DEBUG Eliminando ${TF_ROOT}/.terraform.lock.hcl .."; rm -f ${TF_ROOT}/.terraform.lock.hcl; }
        [[ -f "cicd.vars" ]] && { t_echo "DEBUG Eliminando cicd.vars .."; rm -f cicd.vars; }
      fi
      #
      # Version del proyecto
      #
      # Ejemplo con plugin de maven: PRJ_VERS=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
      PRJ_VERS=$(xmlstarlet sel -t -v '/_:project/_:version' pom.xml)
      [[ -z ${PRJ_VERS} ]] && { echo "ERROR: No se ha encontrado la version del proyecto en el pom.xml"; exit 2; }
      t_echo "Version del proyecto: ${PRJ_VERS}"
      #
      # Nombre del proyecto
      #
      #PRJ_NAME=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.name -q -DforceStdout)
      PRJ_NAME=$(xmlstarlet sel -t -v '/_:project/_:name' pom.xml)
      [[ -z ${PRJ_NAME} ]] && { echo "ERROR: No se ha encontrado el nombre del proyecto en el pom.xml"; exit 2; }
      t_echo "Nombre del proyecto: ${PRJ_NAME}"
      #
      # Es un proyecto Docker?
      #
      IS_DOCKER_PRJ="false"
      [[ -f "Dockerfile" ]] && IS_DOCKER_PRJ="true"
      t_echo "¿Es un proyecto Docker?: ${IS_DOCKER_PRJ}"
      #
      # Es una version SNAPSHOT?
      #
      IS_SNAPSHOT="false"
      [[ $PRJ_VERS == *"SNAPSHOT" ]] && IS_SNAPSHOT="true"
      t_echo "¿Es un SNAPSHOT?: ${IS_SNAPSHOT}"
      #
      # Obtener las claves de los registries
      #
      get_registry_tags
      t_echo "Version para registry: $REG_VERSION"
      t_echo "Imagen docker: $DOCKER_IMG_TAG"
      t_echo "Nombre de Tag: $TAG_NAME"
      #
      # Guardar las variables de entorno globales en un fichero .env
      #
      echo "PRJ_VERS=$PRJ_VERS" > prepare.env
      echo "PRJ_NAME=$PRJ_NAME" >> prepare.env
      echo "IS_DOCKER_PRJ=$IS_DOCKER_PRJ" >> prepare.env
      echo "IS_SNAPSHOT=$IS_SNAPSHOT" >> prepare.env
      echo "REG_VERSION=$REG_VERSION" >> prepare.env
      echo "DOCKER_IMG_TAG=$DOCKER_IMG_TAG" >> prepare.env
      echo "TAG_NAME=$TAG_NAME" >> prepare.env
      # Final
      t_echo "INFO Job finalizado con exito"

  #    
  # Creamos un artefacto que contiene la/s variables/s de entorno, que asi estan
  # automaticamente disponibles para el resto del pipeline.
  #
  artifacts:
    reports:
      dotenv: prepare.env

################################## E O F ##########################################      
