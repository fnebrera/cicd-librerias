#########################################################################################################
# Crear la libreria de funciones bash que vamos a usar en todo el pipeline.
# Para emplearla, en cada job que la necesite basta con incluir:
# before_script:
#   - . funciones-bash.sh
#
# Vers  Por Fecha      Notas
# ----- --- ---------- ----------------------------------------------------------------------------------
# 1.0.2 FNG 07/10/2022 Version inicial
#
#########################################################################################################

create_bash-library:
  image: alpine:3.16.2

  stage: .pre

  script:
    - |
      cat > funciones-bash.sh << 'EndOfFile'
      #!/bin/bash
      #====================================================================
      # echo_job_banner()
      # Escribe en el log un banner de inicio del job.
      #
      # @param   Nombre del job
      #====================================================================
      function echo_job_banner() {
          echo "=============================================================================================="
          echo "Ejecutando job ${1} en ${CI_COMMIT_REF_NAME}"
          echo "=============================================================================================="
      }

      #====================================================================
      # get_register_version()
      # Obtiene la version del proyecto a emplear en el package registry, en
      # funcion de la rama en la que estemos y las variables de pipeline.
      #
      # @return   Prepara la variable de entorno REG_VERSION
      #====================================================================
      function get_register_version() {
          REG_VERSION="$PRJ_VERS"
          #
          # En que rama estamos?
          #
          case ${CI_COMMIT_REF_NAME} in
              master)
                  if [[ $IS_SNAPSHOT == "true" ]]; then
                      echo "ERROR: PUSH de <master> en version SNAPSHOT no permitido"
                      exit 2
                  fi
                  ;;
              develop)
                  if [[ $IS_SNAPSHOT == "true" ]]; then
                      #
                      # Agregamos numero de snapshot, si lo hay
                      #
                      [[ -z $SNAPSHOT_NUMBER ]] || REG_VERSION="${PRJ_VERS}.${SNAPSHOT_NUMBER}"
                  else
                      if [[ $ALLOW_RELEASE_IN_DEVELOP != "true" ]]; then
                          echo "ERROR: PUSH de <develop> en version RELEASE no permitido"
                          exit 2
                      fi
                      #
                      # Agregamos numero de snapshot, si lo hay, precedido de "DEVELOP-RELEASE"
                      #
                      [[ -z $SNAPSHOT_NUMBER ]] || REG_VERSION="${PRJ_VERS}-DEVELOP-RELEASE.${SNAPSHOT_NUMBER}"
                  fi
                  ;;
              "${HOTFIX_BRANCH}")
                  #
                  # Agregamos numero de hotfix, si lo hay, precedido de "HOTFIX"
                  #
                  [[ -z $HOTFIX_NUMBER ]] || REG_VERSION="${PRJ_VERS}-HOTFIX.${HOTFIX_NUMBER}"
                  ;;
              *)
                  echo "ERROR: Rama ${CI_COMMIT_REF_NAME} no puede pasar etapa Register"
                  exit 2          
                  ;;
          esac
      }
      EndOfFile

  artifacts:
    paths: 
      - funciones-bash.sh
