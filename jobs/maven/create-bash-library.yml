#########################################################################################################
# Crear la libreria de funciones bash que vamos a usar en todo el pipeline.
# Para emplearla, en cada job que la necesite basta con incluir:
# before_script:
#   - . funciones-bash.sh
#
# Vers  Por Fecha      Notas
# ----- --- ---------- ----------------------------------------------------------------------------------
# 1.0.2 FNG 07/10/2022 Version inicial
#
#########################################################################################################

create-bash-library:
  image: alpine:3.16.2

  stage: .pre

  script:
    - |
      cat > funciones-bash.sh << 'EndOfFile'
      #!/bin/bash
      #====================================================================
      # echo_job_banner()
      # Escribe en el log un banner de inicio del job.
      #
      # @param   Nombre del job
      #====================================================================
      function echo_job_banner() {
          echo "=============================================================================================="
          echo "Ejecutando job ${1} en ${CI_COMMIT_REF_NAME}"
          echo "=============================================================================================="
      }

      #====================================================================
      # get_registy_tags()
      # Obtiene las claves a emplear en los difentes registries, en forma
      # de variables de entorno.
      #
      # @return   REG_VERSION: Version del artefacto en el package registry
      # @return   DOCKER_IMG_TAG: Tag completo de la imagen docker
      # @return   TAG_NAME: Nombre del tag Git a generar
      #====================================================================
      function get_registy_tags() {
          REG_VERSION="$PRJ_VERS"
          TAG_NAME="wrong-${PRJ_VERS}"
          DOCKER_IMG_TAG="${CI_REGISTRY_IMAGE}/wrong:${PRJ_VERS}"
          #
          # En que rama estamos?
          #
          case ${CI_COMMIT_REF_NAME} in
              master)
                  if [[ $IS_SNAPSHOT == "true" ]]; then
                      echo "ERROR: PUSH de <master> en version SNAPSHOT no permitido"
                      exit 2
                  fi
                  DOCKER_IMG_TAG="${CI_REGISTRY_IMAGE}/release:${PRJ_VERS}"
                  TAG_NAME="release-${PRJ_VERS}"
                  ;;
              develop)
                  if [[ $IS_SNAPSHOT == "true" ]]; then
                      DOCKER_IMG_TAG="${CI_REGISTRY_IMAGE}/snapshot:${PRJ_VERS}"
                      TAG_NAME="snapshot-${PRJ_VERS}"
                  else
                      if [[ $ALLOW_RELEASE_IN_DEVELOP != "true" ]]; then
                          echo "ERROR: PUSH de <develop> en version RELEASE no permitido"
                          exit 2
                      fi
                      REG_VERSION="${PRJ_VERS}-DEVELOP-RELEASE
                      DOCKER_IMG_TAG="${CI_REGISTRY_IMAGE}/develop-release:${PRJ_VERS}"
                      TAG_NAME="develop-release-${PRJ_VERS}"
                  fi
                  #
                  # En cualquier caso agregar numero de snapshot, si existe
                  #
                  if ! [[ -z $SNAPSHOT_NUMBER ]]; then
                    REG_VERSION="${REG_VERSION}.${SNAPSHOT_NUMBER}"
                    DOCKER_IMG_TAG="${DOCKER_IMG_TAG}.${SNAPSHOT_NUMBER}"
                    TAG_NAME="${TAG_NAME}.${SNAPSHOT_NUMBER}"
                  fi
                  ;;
              "${HOTFIX_BRANCH}")
                  REG_VERSION="${PRJ_VERS}-HOTFIX
                  IMG_TAG="${CI_REGISTRY_IMAGE}/hotfix:${PRJ_VERS}"
                  #
                  # Agregamos numero de hotfix, si lo hay
                  #
                  if ! [[ -z $HOTFIX_NUMBER ]]; then
                    REG_VERSION="${REG_VERSION}.${HOTFIX_NUMBER}"
                    DOCKER_IMG_TAG="${DOCKER_IMG_TAG}.${HOTFIX_NUMBER}"
                    TAG_NAME="${TAG_NAME}.${HOTFIX_NUMBER}"
                  fi
                  ;;
              *)
                  echo "WARN: Rama ${CI_COMMIT_REF_NAME} no pasa etapas de registro. Se ignora"
                  ;;
          esac
      }
      EndOfFile

  artifacts:
    paths: 
      - funciones-bash.sh
