#########################################################################################################
# Crea la imagen docker en base al Dockerfile, y la sube al Component Registry del propio gitlab.
# Para que este job funcione, el Component Registry debe estar configurado en gitlab.
# Se ejecuta solo para ramas master, develop y hoyfix (si existe).
# Se cachea el directorio /target, que habra sido populado previamente por la etapa build.
#
# Vers  Por Fecha      Notas
# ----- --- ---------- ----------------------------------------------------------------------------------
# 1.0.0 FNG 13/08/2022 Version inicial
#
########################################################################################################## Crear imagen docker usando el Dockerfile del proyecto
docker-register-job:
  stage: register

  image: docker:20.10.17
  services:
    - docker:20.10.17-dind

  variables:
    DOCKER_TLS_CERTDIR: "/certs"

  rules:
    # Creamos y registramos imagen Docker solo en develop, master y hotfix (si lo hay)
    - if: $CI_COMMIT_REF_NAME == "develop" || $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME == $HOTFIX_BRANCH

  cache:
    paths:
      - ./.m2/repository
      - target
    policy: pull

  script:
    - >
      echo -e "==============================================================================================
      \nEjecutando etapa DOCKER en $CI_COMMIT_REF_NAME
      \n=============================================================================================="
    # PRUEBAS
    - ls -al target/*.jar
    # Solo si es un proyecto Docker
    - '[[ $DOCKER_PRJ != "true" ]] && { echo "WARN: No existe Dockerfile. Esta etapa no se ejecuta."; exit 0; }'
    #
    # Preparamos tagid. Las reglas actuales son:
    #   - En <master> no se admite SNAPSHOT. Se registra en 'release' con el Id del proyecto.
    #   - En <develop> se admite RELEASE solo si el flag ALLOW_RELEASE_IN_SNAPSHOT esta a true. Se registra en 'snapshot'
    #     o 'relesae', pero agregando el SNAPSHOT_NUMBER, si existe.
    #   - En rama hotfix se registra en 'hotfix' agregando el HOTFIX_NUMBER, si existe.
    #
    - |
      IMG_TAG="${CI_REGISTRY_IMAGE}/wrong:${PRJ_VERS}"
      case ${CI_COMMIT_REF_NAME} in
          master)
              if [[ $IS_SNAPSHOT == "true" ]]; then
                  echo -e "ERROR: PUSH de <master> en version SNAPSHOT no permitido"
                  exit 2
              fi
              #
              # Va al registry 'release' y solo con la version del proyecto.
              #
              IMG_TAG="${CI_REGISTRY_IMAGE}/release:${PRJ_VERS}"
              ;;
          develop)
              if [[ $IS_SNAPSHOT == "true" ]]; then
                  #
                  # Va a 'snapshot'
                  #
                  IMG_TAG="${CI_REGISTRY_IMAGE}/snapshot:${PRJ_VERS}"
              else
                  if [[ $ALLOW_RELEASE_IN_DEVELOP != "true" ]]; then
                      echo -e "ERROR: PUSH de <develop> en version RELEASE no permitido"
                      exit 2
                  fi
                  #
                  # Va a 'develop-release'
                  #
                  IMG_TAG="${CI_REGISTRY_IMAGE}/develop-release:${PRJ_VERS}"
              fi
              #
              # Sea snapshot o release, en develop siempre agregamos el numero de snapshot, si existe
              #
              [[ -z $SNAPSHOT_NUMBER ]] || IMG_TAG="${IMG_TAG}.${SNAPSHOT_NUMBER}"
              ;;
          ${HOTFIX_BRANCH})
              #
              # Va a 'hotfix'
              #
              IMG_TAG="${CI_REGISTRY_IMAGE}/hotfix:${PRJ_VERS}"
              [[ -z ${HOTFIX_NUMBER} ]] || IMG_TAG="${IMG_TAG}.${HOTFIX_NUMBER}"
              ;;
          *)
              echo "ERROR: Rama ${CI_COMMIT_REF_NAME} no puede pasar etapa Docker"
              exit 2          
              ;;
      esac
    - 'echo "IMG_TAG: ${IMG_TAG}"'
    - 'echo "IMG_TAG=${IMG_TAG}" >> prepare.env'
    - docker -v
    - 'echo "$CICD_PASSWD" | docker login -u $CICD_USER --password-stdin $CICD_REGISTRY_HOST'
    - docker build -t $IMG_TAG .
    - docker push $IMG_TAG 

  artifacts:
    reports:
      dotenv: prepare.env

################################## E O F ##########################################