#########################################################################################################
# Crea la imagen docker en base al Dockerfile, y la sube al Component Registry del propio gitlab.
# Para que este job funcione, el Component Registry debe estar configurado en gitlab.
# Se ejecuta solo para ramas master, develop y hoyfix (si existe).
# Se cachea el directorio /target, que habra sido populado previamente por la etapa build.
#
# Vers  Por Fecha      Notas
# ----- --- ---------- ----------------------------------------------------------------------------------
# 1.0.0 FNG 22/08/2022 Version inicial
# 1.0.2 FNG 07/10/2022 Se agrega la libreria de funciones bash
#
########################################################################################################## Crear imagen docker usando el Dockerfile del proyecto
docker-register-job:
  stage: docker

  #
  # Necesitamos ejecutar comandos docker en un container docker, por lo que
  # se necesita DinD (docker in docker). Esta pareja de imagenes nos da el entorno adecuado.
  #
  image: docker:20.10.17
  services:
    - docker:20.10.17-dind

  variables:
    DOCKER_TLS_CERTDIR: "/certs"

  rules:
    # Control local del pipeline
    - if: $RUN_REGISTER_STAGES == "false"
      when: never
    - if: $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME == $HOTFIX_BRANCH
    - if: $CI_COMMIT_REF_NAME == "develop" && $REGISTER_DEVELOP == "true" 

  cache:
    paths:
      - ./target

  before_script:
    - . funciones-bash.sh

  script:
    - |
      # Esta imagen requiere coreutils para mostrar milisegundos en el timestamp
      apk add coreutils
      echo_job_banner DOCKER
      # Solo si es un proyecto Docker
      [[ $IS_DOCKER_PRJ != "true" ]] && { echo "WARN: No es un proyecto Docker. Esta etapa no se ejecuta."; exit 0; }
      # Necesitamos el fat-jar
      JAR_FILE="./target/${PRJ_NAME}-${PRJ_VERS}.jar"
      [[ -f "${JAR_FILE}" ]] || { echo "El archivo ${JAR_FILE} no existe"; exit 1; }
      docker -v
      echo "$CICD_REGISTRY_PASSWD" | docker login -u $CICD_REGISTRY_USER --password-stdin $CICD_REGISTRY_HOST
      docker build -t $DOCKER_IMG_TAG .
      docker push $DOCKER_IMG_TAG 
      # Final
      t_echo "INFO Job finalizado con exito"

################################## E O F ##########################################