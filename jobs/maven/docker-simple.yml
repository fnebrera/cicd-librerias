#########################################################################################################
# Crea la imagen docker en base al Dockerfile, y la sube al Component Registry del ropio gitlab.
# Normalmente se ejecuta en paralelo al job "pkg-register-job".
# Para que este job funcione, el Pacjage Registry debe estar configurado en el pom.xml.
# Se ejecuta solo para ramas master y develop.
# Se cachea el directorio /target, que habra sido populado previamente por la etapa build.
#
# Vers  Por Fecha      Notas
# ----- --- ---------- ----------------------------------------------------------------------------------
# 1.0.0 FNG 26/07/2022 Version inicial
#
########################################################################################################## Crear imagen docker usando el Dockerfile del proyecto
docker-register-job:
  stage: docker

  image: docker:20.10.17
  services:
    - docker:20.10.17-dind

  rules:
    - if: $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME == "develop" 

  cache:
    paths:
      - target

  script:
    - >
      echo -e "==============================================================================================
      \nEjecutando etapa DOCKER en $CI_COMMIT_REF_NAME
      \n=============================================================================================="
    - '[[ -f "Dockerfile" ]] || { echo "INFO: No existe Dockerfile. Esta etapa no se ejecuta"; exit 0; }'
    - '[[ -z ${PRJ_VERS} ]] && { echo "ERROR: No se ha encontrado la version del proyecto en el pom.xml"; exit 2; }'
    - '[[ ${PRJ_VERS} == *"SNAPSHOT" ]] && [[ ${CI_COMMIT_REF_NAME} != "develop" ]] && { echo "ERROR: Push de SNAPSHOT debe hacerse en rama develop"; exit 3; }' 
    - '[[ ${PRJ_VERS} != *"SNAPSHOT" ]] && [[ ${CI_COMMIT_REF_NAME} != "master" ]] && { echo "ERROR: Push de RELEASE debe hacerse en rama master"; exit 3; }'
    - 'IMG_TAG="${CI_REGISTRY_IMAGE}/release:${PRJ_VERS}"'
    - '[[ ${PRJ_VERS} == *"SNAPSHOT" ]] && IMG_TAG="${CI_REGISTRY_IMAGE}/snapshot:${PRJ_VERS}"'
    - 'echo "IMG_TAG: $IMG_TAG"'
    - 'docker --version'
    - 'echo "$CICD_PASSWD" | docker login -u $CICD_USER --password-stdin $CICD_REGISTRY_HOST'
    - 'docker build -t $IMG_TAG .'
    - 'docker push $IMG_TAG' 
