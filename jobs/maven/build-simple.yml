#########################################################################################################
# Construye el fat-jar dejandolo preparado en el directorio /target.
# Se ejecuta solo para ramas master y develop.
# Se cachea el directorio /target, que habra sido limpiado previamente por la etapa compile.
#
# Vers  Por Fecha      Notas
# ----- --- ---------- ----------------------------------------------------------------------------------
# 1.0.0 FNG 26/07/2022 Version inicial
#
#########################################################################################################
build-job:
  stage: build

  rules:
    # Hacemos build solo en develop, master y hotfix (si lo hay)
    - if: $CI_COMMIT_REF_NAME == "develop" || $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME == $HOTFIX_BRANCH

  cache:
    paths:
      - ./.m2/repository
      - target
      
  script:
    - >
      echo -e "==============================================================================================
      \nEjecutando etapa BUILD en $CI_COMMIT_REF_NAME
      \n=============================================================================================="
    # 
    # Hacemos build en cualquier caso.
    # Saltamos tests, pues deberian haberse ejecutado antes.
    #
    - mvn package -DskipTests
    #
    # Si es develop deberia ser un snapshot, salvo que permitamos release.
    # Si es master deberia ser release.
    #
    - |
      [[ -d tmp_jars ]] && rm -f tmp_jars/*
      retcode=0
      if [[ $CI_COMMIT_REF_NAME == "master" && $IS_SNAPSHOT == "true" ]]; then
        echo -e "ERROR: PUSH de <master> en version SNAPSHOT no permitido.\nSe ha generado el artefacto en tmp_jars/, pero el pipeline se interrumpira." 
        retcode=2
      fi
      if [[ $CI_COMMIT_REF_NAME == "develop" && $IS_SNAPSHOT != "true" && $ALLOW_RELEASE_IN_DEVELOP != "true" ]]; then
        echo -e "ERROR: PUSH de <develop> en verion RELEASE no permitido.\nSe ha generado el artefacto en tmp_jars/, pero el pipeline se interrumpira."
        retcode=3
      fi
      if [[ $retcode > 0 ]]; then
        mkdir -p tmp_jars
        rm -f tmp_jars/*
        cp target/*.jar tmp_jars
        git config user.name "$CICD_USER"
        git config user.email "$CICD_EMAIL"
        git remote remove origin
        git remote add origin ${ORIGIN_URL}
        git add tmp_jars
        git commit -m "Guardar tmp_jars/${PRJ_VERS}.jar"
      fi
      echo "Build finalizado con retcode: $retcode"
    - exit $retcode

  ################################## E O F ##########################################
