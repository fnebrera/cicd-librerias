#########################################################################################################
# Conecta con el host de destino del deploy y regenera el docker-compose
# usando la imagen generada en la etapa docker.
# Sólo se ejecuta en master.
# Para que esta etapa se ejecute, se debe entrar manualmente la variable SEGUIR con valor 'true' en el
# momento de lanzar el job.
#
# Vers  Por Fecha      Notas
# ----- --- ---------- ----------------------------------------------------------------------------------
# 1.0.0 FNG 22/08/2022 Version inicial
# 1.0.1 FNG 06/09/2022 Se incorporan resultados de Terraform
#
#########################################################################################################
deploy-job:
  stage: deploy

  variables:
    SKIP: "false"

  rules:
    # Hacemos deploy solo en master, y en manual
    - if: $CI_COMMIT_REF_NAME == "master"
      when: manual
    # Para DEBUG
    - if: $CI_COMMIT_REF_NAME == "dev-fng" && $DEBUG_CD == "true"
      when: manual

  before_script:
    # Definir prmisos estrictos en la clave privada
    - chmod 400 $DEPLOY_SSH_KEY

  script:
    - >
      echo -e "==============================================================================================
      \nEjecutando etapa DEPLOY en $CI_COMMIT_REF_NAME
      \n=============================================================================================="
    # En todas las etapas manuales hacemos lo mismo
    - '[[ ${SKIP} == "true" ]] && { echo "WARN: Ha entrado SKIP=true, asi que saltamos esta etapa."; exit 0; }'
    - |
      # DEBUG
      echo "DOCKER_PRJ: ${DOCKER_PRJ}"
      echo "IMG_TAG: ${IMG_TAG}"
      echo "TF_VM_IP: $TF_VM_IP"
      echo "TF_VAR_VM_NAME: $TF_VAR_VM_NAME"
      echo "DEPLOY_SSH_PATH: ${DEPLOY_SSH_PATH}"
      echo "DEPLOY_SSH_SVC_NAME: ${DEPLOY_SSH_SVC_NAME}"
      # Solo si es un proyecto Docker
      # COMENTADO PROVISIONALMENTE [[ $DOCKER_PRJ != "true" ]] && { echo "WARN: No es un proyecto Docker. Esta etapa no se ejecuta."; exit 0; }
      #
      # DEPLOY_SSH_USER y DEPLOY_SSH_KEY son valiables del proyecto, y TF_VM_IP nos la ha devuelto la etapa tf-apply
      #
      [[ -z $TF_VM_IP ]] && { echo "ERROR: No existe la variable TF_VM_IP. No se puede continuar con el deploy."; exit 1; }
      #
      # Ejecutamos un par de comandos de preparacion del entorno remoto
      #
      CONN_STRING="${DEPLOY_SSH_USER}@${TF_VM_IP}"
      COMANDO="( mkdir -p ${DEPLOY_SSH_PATH} && cd ${DEPLOY_SSH_PATH} && ls -al && rm -Rf deploy )"
      # DEBUG
      echo "INFO ejecutando: $COMANDO"
      ssh -o StrictHostKeyChecking=no -i ${DEPLOY_SSH_KEY} ${CONN_STRING} '${COMANDO}'
      #
      # Preparamos el bat que vamos a ajecutar con sftp (es un pequeño archivo temporal)
      #
      echo "INFO Preparando sftp batch file.."
      echo "cd ${DEPLOY_SSH_PATH}" > sftp.bat 
      echo "put -R deploy" >> sftp.bat 
      echo "chmod 755 deploy/deploy.sh" >> sftp.bat 
      #
      # Lanzar el sftp
      #
      echo "INFO Ejecutando sftp batch.."
      sftp -o StrictHostKeyChecking=no -i ${DEPLOY_SSH_KEY} -b sftp.bat ${CONN_STRING}
      [[ $? != 0 ]] && { echo "ERROR sftp no se ha ejecutado correctamente"; exit 1; }
      #
      # Ejecutamos el comando remoto de deploy
      #
      COMANDO="( cd ${DEPLOY_SSH_PATH}/deploy && ./deploy.sh -s ${DEPLOY_SSH_SVC_NAME} -i ${IMG_TAG} -d ${DEPLOY_SSH_PATH} -n ${TF_VAR_VM_NAME} > deploy.log 2>&1 )"
      echo "INFO Ejecutando script remoto: ${COMANDO}"
      ssh -o StrictHostKeyChecking=no -i ${DEPLOY_SSH_KEY} ${CONN_STRING} '${COMANDO}'
      # Nos bajamos el log y lo mostramos
      # PENDIENTE

################################## E O F ##########################################    

