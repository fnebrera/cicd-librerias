#########################################################################################################
# Conecta con el host de destino del deploy y regenera el docker-compose
# usando la imagen generada en la etapa docker.
# Sólo se ejecuta en master.
#
# Vers  Por Fecha      Notas
# ----- --- ---------- ----------------------------------------------------------------------------------
# 1.0.0 FNG 22/08/2022 Version inicial
# 1.0.1 FNG 06/09/2022 Se incorporan resultados de Terraform
# 1.0.2 FNG 15/10/2022 Se estandarizan las etapas CD
#
#########################################################################################################
deploy-job:
  stage: deploy

  variables:
    SKIP: "false"
    IP: ""

  rules:
    # Control local del pipeline
    - if: $RUN_DEPLOY_STAGES == "false"
      when: never
    # Hacemos deploy en master, y en manual
    - if: $CI_COMMIT_REF_NAME == "master"
      when: manual
    # Tambien en develop, siempre que el correspondiente flag éste activado
    - if: $CI_COMMIT_REF_NAME == "develop" && $DEPLOY_DEVELOP == "true"
      when: manual

  cache:
    paths:
      - cicd.vars

  before_script:
    # Definir prmisos estrictos en la clave privada
    - chmod 400 ${DEPLOY_SSH_KEY}
    - . funciones-bash.sh

  script:
    - |
      echo_job_banner DEPLOY
      # En todas las etapas manuales hacemos lo mismo
      [[ ${SKIP} == "true" ]] && { echo "WARN: Ha entrado SKIP=true, asi que saltamos esta etapa."; exit 0; }
      #
      # Ejecutamos la shell "exec_deploy.sh" que debe existir en el root de deploy
      #
      [[ -f "${DEPLOY_ROOT}/exec_deploy.sh" ]] || { echo "ERROR: No existe la shell 'exec_deploy.sh'"; exit 1; }
    - . ${DEPLOY_ROOT}/exec_deploy.sh
    - exec_deploy "$IP"

################################## E O F ##########################################    

