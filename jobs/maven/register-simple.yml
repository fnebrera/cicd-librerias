#########################################################################################################
# Registra el artefacto en el Package Registry de Gitlab. Se ejecuta en la fase "registry".
# Para que este job funcione, el Package Registry debe estar configurado en el pom.xml.
# Adicionamente debe existir un archivo 'ci_setting.xml' con las credenciales para el registry.
# Se ejecuta solo para ramas master, develop y hotfix (si existe).
# Se cachea el directorio /target, que habra sido populado previamente por la etapa build.
#
# Vers  Por Fecha      Notas
# ----- --- ---------- ----------------------------------------------------------------------------------
# 1.0.0 FNG 26/07/2022 Version inicial
#
#########################################################################################################
pkg-register-job:
  stage: register

  rules:
    # Hacemos register solo en develop, master y hotfix (si lo hay)
    - if: $CI_COMMIT_REF_NAME == "develop" || $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME == $HOTFIX_BRANCH

  cache:
    paths:
      - ./.m2/repository
      - target

  script:
    - >
      echo -e "==============================================================================================
      \nEjecutando etapa REGISTER en $CI_COMMIT_REF_NAME
      \n=============================================================================================="
    #
    # Si queremos guardar solo el .jar y el pom (lo habitual), usaremos la forma simple de deploy:
    #
    # - mvn deploy -s ci_settings.xml -DskipTests
    #
    # Si ademas queremos guardar los fuentes, lo hacemos algo mas complicado:
    #
    - |
      CLASSIF=""
      JAR_FILE="./target/${PRJ_NAME}-${PRJ_VERS}.jar"
      [[ -f "${JAR_FILE}" ]] || { echo "El archivo ${JAR_FILE} no existe"; exit 1; }
      REG_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/maven"
      #
      # En que rama estamos?
      #
      case ${CI_COMMIT_REF_NAME} in
          master)
              if [[ $IS_SNAPSHOT == "true" ]]; then
                  echo "ERROR: PUSH de <master> en version SNAPSHOT no permitido"
                  exit 2
              fi
              ;;
          develop)
              if [[ $IS_SNAPSHOT == "true" ]]; then
                  #
                  # Agregamos numero de snapshot, si lo hay
                  #
                  [[ -z $SNAPSHOT_NUMBER ]] || CLASSIF="-Dclassifier=${SNAPSHOT_NUMBER}"
              else
                  if [[ $ALLOW_RELEASE_IN_DEVELOP != "true" ]]; then
                      echo "ERROR: PUSH de <develop> en version RELEASE no permitido"
                      exit 2
                  fi
                  #
                  # Agregamos numero de snapshot, si lo hay
                  #
                  [[ -z $SNAPSHOT_NUMBER ]] || CLASSIF="-Dclassifier=DEV-${SNAPSHOT_NUMBER}"
              fi
              ;;
          ${HOTFIX_BRANCH})
              [[ -z $HOTFIX_NUMBER ]] || CLASSIF="-Dclassifier=HOTFIX-${HOTFIX_NUMBER}"
              ;;
          *)
              echo "ERROR: Rama ${CI_COMMIT_REF_NAME} no puede pasar etapa Register"
              exit 2          
              ;;
      esac
      SRC_FILE="src.jar"
      jar cf ${SRC_FILE} ./src/*
      #
      # Deploy
      #
      mvn deploy:deploy-file -s ci_settings.xml -Durl="${REG_URL}" "${CLASSIF}" \
      -DrepositoryId="gitlab-maven" -Dfile="${JAR_FILE}" -DpomFile="pom.xml" -Dsources="${SRC_FILE}"
  
  ################################## E O F ##########################################

