#########################################################################################################
# Aplica el provisionado terraform, usando el plan generado previmente por tf-prepare.
# En master, este job es manual, porque tenemos que tener mucho cuidado con el provisioning
# en producción. Sin embargo, en develop lo hemos dejado en automático, a modo de ejemplo.
#
# Vers  Por Fecha      Notas
# ----- --- ---------- ----------------------------------------------------------------------------------
# 1.0.1 FNG 19/09/2022 Version inicial
# 1.0.2 FNG 15/10/2022 Se esdandariza tanto el provisioning como el deploy
#
#########################################################################################################
tf-apply-job:
  stage: tf-apply

  image: registry.gitlab.com/gitlab-org/terraform-images/releases/1.2:v0.43.1

  variables:
    SKIP: "false"
    ACTION: "apply"

  rules:
    # Control local del pipeline
    - if: $RUN_PROVISION_STAGES == "false"
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"
      when: manual
    - if: $CI_COMMIT_REF_NAME == "develop" && $DEPLOY_DEVELOP == "true"

  cache:
    paths:
      - ${TF_ROOT}/.terraform.lock.hcl
      - ${TF_ROOT}/.terraform
      - cicd.vars

  before_script:
    - . funciones-bash.sh

  script:
    - |
      echo_job_banner TF_APPLY
      # En todas las etapas manuales hacemos lo mismo
      [[ ${SKIP} == "true" ]] && { echo "WARN: Ha entrado SKIP=true, asi que saltamos esta etapa."; exit 0; }
      cd $TF_ROOT
      echo "----------------------------------------------------------------------------------------"
      echo "INFO Inicializando Terraform usando el backed Gitlab.."
      echo "----------------------------------------------------------------------------------------"
      init_terraform $CICD_USER $CICD_TOKEN $TF_BACKEND_ADDRESS 
      # Preparar IP de la maquina que vamos a crear
      TF_VM_IP=""
      # Accion por defecto "apply"
      echo "----------------------------------------------------------------------------------------"
      echo "INFO ejecutando terraform ${ACTION}"
      echo "----------------------------------------------------------------------------------------"
      case ${ACTION} in
        apply)
          terraform apply -input=false "plan.cache"
          TF_VM_IP=$(terraform output -raw hyperv_instance_ip)
          echo "INFO IP de la maquina virtual: ${TF_VM_IP}"
          ;;
        destroy)
          terraform destroy -auto-approve
          ;;
        *)
          terraform $ACTION
          ;;
      esac
      #
      # Nos guardamos la IP en variables caheadas de cicd
      #
      set_cicd_var "TF_VM_IP" "${TF_VM_IP}"
      echo "DEBUG cicd.vars queda:"
      cat $CI_PROJECT_DIR/cicd.vars
      echo "=============================================================================================="
      echo "INFO Etapa TF_APPLY finalizada con exito"
      echo "=============================================================================================="
    - cd $CI_PROJECT_DIR

################################## E O F ##########################################
